import type { Theme } from '../schemas';
import { target } from 'message-adapters';
export declare const blockTypes: readonly ["button", "text", "image", "audio", "video", "file", "location", "column", "row", "bubble", "carousel", "dropdown"];
export declare const markdownTypes: readonly ["heading1", "heading2", "heading3", "text", "horizontalRule", "link", "italic", "bold", "orderedList", "unorderedList", "listItem", "lineBreak", "pre"];
export type MarkdownTypes = (typeof markdownTypes)[number];
export type BlockTypes = (typeof blockTypes)[number];
export type BlockStyles = NonNullable<Theme['message']>['blocks'];
export type AudioBlock = target.AudioMessage;
export type BubbleBlock = target.BubbleMessage;
export type ButtonBlock = target.ButtonMessage;
export type CarouselBlock = target.CarouselMessage;
export type ColumnBlock = target.ColumnMessage;
export type DropdownBlock = target.DropdownMessage;
export type FileBlock = target.FileMessage;
export type ImageBlock = target.ImageMessage;
export type LocationBlock = target.LocationMessage;
export type RowBlock = target.RowMessage;
export type TextBlock = target.TextMessage;
export type VideoBlock = target.VideoMessage;
export type BlockObject = target.Message;
export type Sender = {
    name: string;
    avatar?: string;
};
export type MessageObject<T = BlockObject> = {
    direction: 'incoming' | 'outgoing' | 'system';
    disableInput?: boolean;
    sender: Sender;
    timestamp: Date;
    block: T;
};
export type CommonBlockProps = {
    styles?: BlockStyles;
};
export type BlockMap<P extends BlockObject = BlockObject> = {
    [T in P['type']]: Extract<P, {
        type: T;
    }>;
};
