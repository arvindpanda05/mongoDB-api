import { type MessagingSocketOptions, type UserCredentials } from '@botpress/messaging-socket';
import { EventEmitter } from '../../utils';
import { Message, WebChatClient } from '../types';
import { TriggerSchema } from './adapters/Trigger';
import { z } from 'zod';
type Events = {
    connect: UserCredentials;
    disconnect: undefined;
    user: string | undefined;
    conversation: string | undefined;
    message: Message;
    messageSent: string;
    startTyping: undefined;
    stopTyping: undefined;
    trigger: z.infer<typeof TriggerSchema>['trigger'];
};
export declare class MessagingClient implements WebChatClient {
    private socket;
    clientId: string | undefined;
    userId: string | undefined;
    conversationId: string | undefined;
    private userToken;
    private connected;
    private readonly emitter;
    on: EventEmitter<Events>['on'];
    constructor(options: MessagingSocketOptions);
    connect(creds?: UserCredentials): Promise<UserCredentials | undefined>;
    disconnect(): Promise<void>;
    sendMessage(message: string): Promise<void>;
    switchConversation(id: string): Promise<void>;
    conversationExists(id: string): Promise<boolean>;
    newConversation(): Promise<void>;
    listMessages(limit?: number): Promise<{
        payload: import("message-adapters/src/target").Message;
        id: string;
        conversationId: string;
        authorId: string | undefined;
        sentOn: Date;
    }[]>;
}
export {};
