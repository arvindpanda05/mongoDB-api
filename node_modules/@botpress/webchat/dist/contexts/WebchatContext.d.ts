import { CSSProperties, FC, ReactNode } from 'react';
import type { BlockObject, BlockStyles, Configuration, MessageObject } from '../types';
import { EventEmitter, Events } from '../utils';
import { Theme } from '../schemas';
import { type WebChatClient } from '../client';
export type StyleOptions = {
    className?: string;
    style?: CSSProperties;
};
export type Renderers<P extends BlockObject = BlockObject> = {
    [T in P['type']]: FC<Extract<P, {
        type: T;
    }> & {
        styles: BlockStyles;
    }>;
};
export type ModalProps = {
    title: string | null;
    content: ReactNode | null;
};
export type ContextVaue = {
    theme: Theme;
    renderers: Renderers;
    messages: MessageObject[];
    setMessages: React.Dispatch<React.SetStateAction<MessageObject[]>>;
    eventEmitter: EventEmitter<Events>;
    configuration: Configuration;
    setConfiguration: React.Dispatch<React.SetStateAction<Configuration>>;
    state: {
        connected: boolean;
        disableComposer: boolean;
        /**
         * Disables interactions on buttons, inputs, etc.
         */
        isReadOnly?: boolean;
    };
    client?: {
        on: WebChatClient['on'];
        sendMessage: WebChatClient['sendMessage'];
        restartConversation: () => void;
    } & Pick<WebChatClient, 'userId' | 'conversationId' | 'clientId'>;
    setState: (state: Partial<ContextVaue['state']>) => void;
    setTheme: (styles: Partial<Theme>) => void;
};
export declare const WebchatContext: import("react").Context<ContextVaue | null>;
export declare function useWebchatContext(): ContextVaue;
